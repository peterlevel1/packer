;(function (global) {
	var toString = Object.prototype.toString;
	var pSlice = Array.prototype.slice;

	function isObject(obj, isPlain) {
		return obj == null ? false :
			typeof obj !== 'object' ? false :
			!isPlain ? true : toString.call(obj) === '[object Object]' &&
				obj.constructor === Object;
	}

	function isArrayLike(obj) {
		if (Array.isArray(obj)) {
			return true;
		} else if (!obj ||
							obj.length === void 0 ||
							typeof obj === 'function' ||
							(obj.window !== void 0 && obj.window === obj) ||
							(obj.nodeType === 1 && typeof obj.length !== 'number') ) {
			return false;
		}

		var length = obj.length;

		return length === 0 ||
			(typeof length === 'number' &&
			length > 0 &&
			(length - 1) in obj);
	}

	function isPlainObject(obj) {
		return isObject(obj, true) &&
			obj.nodeType === void 0 &&
			obj.window === void 0;
	}

	function extend() {
		var deep = arguments[0] === true;
		var index = 1;
		var target = typeof arguments[0] === 'boolean'
			? ++index && arguments[1]
			: arguments[0];
		target = isObject(target) || typeof target === 'function'
			? target
			: {};
		target = arguments.length > 1
			? target
			: !(index = 0) && this;

		return arguments.length === 0
			? target
			: extendData(target, deep, arguments, index);
	}

	function extendData(target, deep, args, i) {
		var arrayLike = isArrayLike(target),
			obj, keys, key, value, data;

		for (var ii = args.length; i < ii; i++) {
			obj = args[i];

			if (obj == null || !isObject(obj) || !(isPlainObject(obj) || isArrayLike(obj))) {
				continue;
			}

			keys = Object.keys(obj);
			for (var k = 0, kk = keys.length; k < kk; k++) {
				key = keys[k];
				value = obj[key];

				if (value === void 0 || value === target) {
					continue;
				}

				if (!deep || !isObject(value)) {
					if (arrayLike) {
						target[target.length] = value;
					} else {
						target[key] = value;
					}
				} else {
					data =
						isArrayLike(value) ?
							(isArrayLike(target[key]) ? target[key] : []) :
						isPlainObject(value) ?
							(isPlainObject(target[key]) ? target[key] : {}) :
						{};
					target[key] = extend(true, data, value);
				}
			}
		}

		return target;
	}

	extend.isObject = isObject;
	extend.isPlainObject = isPlainObject;
	extend.isArrayLike = isArrayLike;
	extend.isCommon = function (obj) {
		return !isObject(obj);
	};

	if (typeof define !== 'undefined' && define.amd) {
		define(function () { return extend; });
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = extend;
	} else if (global.window) {
		global.extend = extend;
	}
})(this);